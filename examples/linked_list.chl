fn Node(const type T){
  return struct {
    mut T value;
    mut Node(T)*? next;
  }
}

export fn LinkedList(const type T){
  return struct {
    mut Node(T)*? head;
    mut Node(T)*? tail;
    mut uint size = 0;
    
    fn add(const T value){
      const Node* node = heap(Node { value });
      with this.tail as const var tl {
        tl!.next = node;
        goto end;
      }
      this!.head = node;
      this!.tail = node;
    end:
      ++this!.size;
    }
  }
  
  T fn get(const int idx){
    with this!.head as mut var cur {
      loop(mut uint i=0u; i<idx ;++i){
        with cur!.next as const var next {
          cur = next;
          continue;
        }
        error("out of range");
      }
      return cur!.value;
    }
    error("not initialized");
  }
}
